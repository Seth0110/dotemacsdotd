#+title: Emacs Init File
#+author: Seth Sevier
#+property: header-args :tangle init.el

* Bootstrap

This makes sure init.el is up to date, ~C-c C-c~ will also bootstrap the file if it does not exist.

#+begin_src emacs-lisp
  (org-babel-tangle-file "~/.emacs.d/init.org")
#+end_src

* Dependencies

This init file requires the following external packages:
- CMU Fonts
- Python3

* Init File
** Package
#+begin_src emacs-lisp
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** Look & feel
#+begin_src emacs-lisp
  (display-time-mode)
  (display-battery-mode)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (tool-bar-mode 0)

  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode)
    :config
    (set-face-attribute 'default nil :font "FreeMono 16")
    (set-face-attribute 'fixed-pitch nil :font "FreeMono 16")
    (set-face-attribute 'variable-pitch nil :font "CMU Serif 16"))
#+end_src

*** Line
#+begin_src emacs-lisp
  (column-number-mode t)
  (cond ((display-graphic-p)
         (global-hl-line-mode 1)))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
*** Theme

Apparently the little bit of science there is on eyestrain says that dark text on light background is better for your eyes.  It helps reduce glare since there's less contrast between the glare and the background, brighter light (think reading in the shade on a sunny day) helps focus the eye better, light text on a dark background with LCD screens also produces a halo effect on the letters and becomes more effortful to focus on.

As for the lack of syntax highlighting; you don't need syntax highlighting to show you grammar when you read a book do you?

#+begin_src emacs-lisp
  (use-package eink-theme)
  (use-package monochrome-theme)

  (defun disable-themes ()
    "Disable all themes."
    (interactive)
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))

  (defun dark ()
    "Enable dark mode."
    (interactive)
    (progn
      (disable-themes)
      (load-theme 'monochrome)
      (custom-set-faces '(link ((t (:background "#111117")))))))

  (defun light ()
    "Enable dark mode."
    (interactive)
    (progn
      (disable-themes)
      (load-theme 'eink)
      (custom-set-faces '(link ((t (:background "#eeeee8")))))))

  (light)
#+end_src
** Editing
*** Text
#+begin_src emacs-lisp
  (show-paren-mode 1)
  (defvar show-paren-delay 0)
  (set-default-coding-systems 'utf-8)
  (set-face-attribute 'default nil :height 140)
  (set-language-environment 'utf-8)
  (add-hook 'text-mode-hook 'line-number-mode)
  (use-package csv-mode
    :init
    (add-hook 'csv-mode 'csv-align-mode))
  (use-package visual-regexp)
  (use-package visual-regexp-steroids)
  (use-package olivetti
    :config (setq olivetti-body-width 80))
#+end_src
*** Programming
**** Lisp & Scheme
#+begin_src emacs-lisp
  (use-package company)
  (use-package rainbow-delimiters
    :hook emacs-lisp-mode-hook)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
#+end_src
**** Python
#+begin_src emacs-lisp
  (defvar python-shell-interpreter "python3")
  (use-package pyvenv)
  (use-package pyvenv-auto)
#+end_src
**** C-like
#+begin_src emacs-lisp
  (use-package csharp-mode)
  (setq c-default-style "linux"
        c-basic-offset 4)
#+end_src
**** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :hook
    (haskell-mode-hook . (lambda () (setq compile-command "stack build"))))
  (use-package shakespeare-mode)
  (defun haskell-mode-setup ()
    (setq haskell-process-type 'stack-ghci))

  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook 'haskell-mode-hook 'haskell-mode-setup)
#+end_src
**** Misc
#+begin_src emacs-lisp
  (use-package bison-mode)
  (use-package dockerfile-mode)
  (use-package gnuplot)
  (use-package haskell-mode)
  (use-package json-mode)
  (use-package markdown-mode)
  (use-package yaml-mode)
  (use-package nginx-mode)
#+end_src
*** "Advanced" features
#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+end_src
** Navigation
*** Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alFh")
#+end_src
*** TRAMP
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
  (setq epa-pinentry-mode 'loopback)
#+end_src
*** Internet
**** Web

I really like eww.  Much less distraction than a traditional browser, no javascript subverts paywalls and pop-ups, and images can be easily turned off.  I like to use olivetti-mode & eww-readable together.

I've created a firefox launch command (for the handful of things that are clunky to use in Emacs, I.E. YouTube) so I can continue to /transcend the operating system/ and use an independent launcher.  I may make this into its own dmenu-replacing launcher package...

#+begin_src emacs-lisp
  (setq eww-search-prefix "https://duckduckgo.com/lite/?q=")
  (setq browse-url-browser-function 'eww-browse-url)

  (defun eww-read ()
    (interactive)
    (progn
      (olivetti-mode)
      (eww-readable)))

  (define-key eww-mode-map (kbd "o") 'eww-read)

  (defun firefox ()
    "Launch firefox without a corresponding buffer."
    (interactive)
    (start-process "firefox" nil "firefox"))
#+end_src
**** RSS
#+begin_src emacs-lisp
  (use-package elfeed)
  (use-package elfeed-dashboard)
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Documents/org/elfeed.org")))
#+end_src
** Annoying features

I hate custom set variables and the bell!

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (setq ring-bell-function 'ignore)
  (setq backup-directory-alist '(("." . "~/.emacs.d/saves")))
#+end_src
** PDF
#+begin_src emacs-lisp
  (defun set-pdf-tools ()
    "Set pdf-tools as the default PDF viewer"
    (if (eq system-type 'gnu/linux)
        (progn
          (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
                TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
                TeX-source-correlate-start-server t)
          (add-hook 'TeX-after-compilation-finished-functions
                    #'TeX-revert-document-buffer)
          (pdf-tools-install))))
  (use-package pdf-tools
      :config
      (set-pdf-tools))
#+end_src
** Workflow
#+begin_src emacs-lisp
  (use-package uptimes)
  (use-package magit)
#+end_src
** Org Mode
*** General
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook 'visual-line-mode)

  (setq org-pretty-entities t)
  (use-package org-appear
      :hook (org-mode . org-appear-mode))
#+end_src
*** Look & Feel
#+begin_src emacs-lisp
  (defun fix-org-mode-levels ()
    "Stop the org-level headers from increasing in height relative to the other text."
    (dolist (face '(org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
      (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

  (add-hook 'org-mode-hook 'fix-org-mode-levels)
#+end_src
*** Agenda & Tasks
#+begin_src emacs-lisp
  (setq org-agenda-files
        (list "~/Documents/org/work.org"))
  (setq org-agenda-start-with-log-mode t)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@)" "|" "DONE(d!)" "CANCELLED(c@)")))
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("NEXT" . "goldenrod")
          ("WAIT" . "orange")
          ("CANCELLED" . "light blue")))
  (setq org-log-done 'time)
  (setq org-tags-column 0)
#+end_src
*** Clock

I like 45 minutes blocks separated by 5 minute breaks of getting up and walking around, or shorter blocks if I have an upcoming meeting.  I've tried out the Pomodoro method but I find the work blocks are too short.  I've also listened to the Andrew Huberman Podcast episode about ultradian cycles and 90 minutes being ideal, but I find that too long.

I use both a timer and a clock so I can set finite work blocks, and also keep a log of the work I've accomplished through for my weekly status update meetings.

Before a block I grab some coffee/tea, water, and put in Loop ear plugs and noise cancelling headphones.  I used to listen to YouTube during these blocks, but having a video in the background inevitably leads to distraction.  A good alternative to ear plugs/YouTube is [[https://gist.github.com/rsvp/1209835][brown noise]].

#+begin_src emacs-lisp
  (setq org-clock-sound "~/.emacs.d/bell.wav")
  
  (defun clock-in ()
    "Clock in to a task for a user-defined number of minutes & run brown noise script."
    (interactive)
    (let ((time (read-number "Enter minutes: ")))
      (progn
        (org-clock-in)
        (org-timer-set-timer (format "00:%d:00" time)))))

  (defun clock-out ()
    "Stop org clock and timer."
    (interactive)
    (progn
      (org-clock-out)
      (org-timer-pause-or-continue)))
#+end_src
*** Links
#+begin_src emacs-lisp
  (setq org-return-follows-link t)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+end_src
*** Programming

<f5> should compile in programming mode and in org mode for literate programs.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode)
    :config (setq org-auto-tangle-default t))

  (defun set-compile-key ()
    (local-set-key (kbd "<f5>") 'compile))

  (add-hook 'prog-mode-hook 'set-compile-key)

  (add-hook 'org-auto-tangle-mode-hook 'set-compile-key)

  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t)))
#+end_src
** Custom Commands
#+begin_src emacs-lisp
  (defun reload ()
    "Reload the init file without restarting"
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (defun ask-before-closing ()
    "Ask if you really want to quit"
    (interactive)
    (if (y-or-n-p (format "Are you sure you want to blaspheme the sacred editor? "))
        (save-buffers-kill-emacs)                                                                                          (message "That's what I thought.")))
  (global-set-key (kbd "C-x C-c") 'ask-before-closing)
  (use-package ace-jump-mode)
  (bind-key "C-." 'ace-jump-mode)
#+end_src
** Skeletons
#+begin_src emacs-lisp
  (define-skeleton s/h-l
    "Write a Haskell language extension."
    "LANGUAGE: "
    "{-# LANGUAGE " str " #-}")
#+end_src
** Work

Work-related information that I don't want synced to my public git repo.

#+begin_src emacs-lisp
  (if (file-exists-p "~/.emacs.d/init-work.el")
      (load-file "~/.emacs.d/init-work.el"))
#+end_src
